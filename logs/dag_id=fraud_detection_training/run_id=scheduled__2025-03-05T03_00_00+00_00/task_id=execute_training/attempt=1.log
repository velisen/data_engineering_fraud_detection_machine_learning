[2025-03-06T03:00:05.378+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2025-03-06T03:00:05.441+0000] {taskinstance.py:2614} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: fraud_detection_training.execute_training scheduled__2025-03-05T03:00:00+00:00 [queued]>
[2025-03-06T03:00:05.451+0000] {taskinstance.py:2614} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: fraud_detection_training.execute_training scheduled__2025-03-05T03:00:00+00:00 [queued]>
[2025-03-06T03:00:05.451+0000] {taskinstance.py:2867} INFO - Starting attempt 1 of 1
[2025-03-06T03:00:05.474+0000] {taskinstance.py:2890} INFO - Executing <Task(PythonOperator): execute_training> on 2025-03-05 03:00:00+00:00
[2025-03-06T03:00:05.477+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=33263) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2025-03-06T03:00:05.478+0000] {standard_task_runner.py:72} INFO - Started process 33264 to run task
[2025-03-06T03:00:05.478+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'fraud_detection_training', 'execute_training', 'scheduled__2025-03-05T03:00:00+00:00', '--job-id', '37', '--raw', '--subdir', 'DAGS_FOLDER/fraud_detection_training_dag.py', '--cfg-path', '/tmp/tmptgrwhjjn']
[2025-03-06T03:00:05.479+0000] {standard_task_runner.py:105} INFO - Job 37: Subtask execute_training
[2025-03-06T03:00:05.626+0000] {task_command.py:467} INFO - Running <TaskInstance: fraud_detection_training.execute_training scheduled__2025-03-05T03:00:00+00:00 [running]> on host b7f28f610775
[2025-03-06T03:00:05.853+0000] {taskinstance.py:3134} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='datamasterylab.com' AIRFLOW_CTX_DAG_ID='fraud_detection_training' AIRFLOW_CTX_TASK_ID='execute_training' AIRFLOW_CTX_EXECUTION_DATE='2025-03-05T03:00:00+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='scheduled__2025-03-05T03:00:00+00:00'
[2025-03-06T03:00:05.853+0000] {taskinstance.py:732} INFO - ::endgroup::
[2025-03-06T03:00:14.048+0000] {warnings.py:112} WARNING - /opt/***/dags/fraud_detection_training.py:15: UserWarning: The numpy.array_api submodule is still experimental. See NEP 47.
  from numpy.array_api import astype

[2025-03-06T03:00:14.467+0000] {fraud_detection_training_dag.py:23} INFO - Initializing fraud detection training
[2025-03-06T03:00:14.478+0000] {fraud_detection_training.py:59} INFO - Configuration loaded successfully
[2025-03-06T03:00:14.721+0000] {fraud_detection_training.py:84} INFO - Minio connection verified. Buckets: ['mlflow']
[2025-03-06T03:00:14.927+0000] {fraud_detection_training.py:171} INFO - Starting model training process
[2025-03-06T03:00:14.927+0000] {fraud_detection_training.py:97} INFO - Connecting to kafka topic transactions
[2025-03-06T03:00:14.980+0000] {conn.py:384} INFO - <BrokerConnection client_id=kafka-python-2.0.5, node_id=bootstrap-0 host=pkc-41wq6.eu-west-2.aws.confluent.cloud:9092 <connecting> [IPv4 ('18.134.120.81', 9092)]>: connecting to pkc-41wq6.eu-west-2.aws.confluent.cloud:9092 [('18.134.120.81', 9092) IPv4]
[2025-03-06T03:00:14.981+0000] {conn.py:1219} INFO - Probing node bootstrap-0 broker version
[2025-03-06T03:00:14.994+0000] {conn.py:480} INFO - <BrokerConnection client_id=kafka-python-2.0.5, node_id=bootstrap-0 host=pkc-41wq6.eu-west-2.aws.confluent.cloud:9092 <handshake> [IPv4 ('18.134.120.81', 9092)]>: Loading system default SSL CAs from ('/usr/lib/ssl/cert.pem', '/usr/lib/ssl/certs', 'SSL_CERT_FILE', '/usr/lib/ssl/cert.pem', 'SSL_CERT_DIR', '/usr/lib/ssl/certs')
[2025-03-06T03:00:15.214+0000] {conn.py:665} INFO - <BrokerConnection client_id=kafka-python-2.0.5, node_id=bootstrap-0 host=pkc-41wq6.eu-west-2.aws.confluent.cloud:9092 <authenticating> [IPv4 ('18.134.120.81', 9092)]>: Authenticated as XGISOSVJLGK43N6I via PLAIN
[2025-03-06T03:00:15.214+0000] {conn.py:449} INFO - <BrokerConnection client_id=kafka-python-2.0.5, node_id=bootstrap-0 host=pkc-41wq6.eu-west-2.aws.confluent.cloud:9092 <authenticating> [IPv4 ('18.134.120.81', 9092)]>: Connection complete.
[2025-03-06T03:00:15.327+0000] {conn.py:1282} INFO - Broker version identified as 2.6.0
[2025-03-06T03:00:15.328+0000] {conn.py:1283} INFO - Set configuration api_version=(2, 6, 0) to skip auto check_version requests on startup
[2025-03-06T03:00:15.330+0000] {consumer.py:118} WARNING - group_id is None: disabling auto-commit.
[2025-03-06T03:00:15.331+0000] {subscription_state.py:171} INFO - Updating subscribed topics to: ('transactions',)
[2025-03-06T03:00:15.340+0000] {subscription_state.py:257} INFO - Updated partition assignment: [('transactions', 0), ('transactions', 1), ('transactions', 2), ('transactions', 3), ('transactions', 4), ('transactions', 5)]
[2025-03-06T03:00:15.356+0000] {conn.py:384} INFO - <BrokerConnection client_id=kafka-python-2.0.5, node_id=4 host=b4-pkc-41wq6.eu-west-2.aws.confluent.cloud:9092 <connecting> [IPv4 ('52.56.207.193', 9092)]>: connecting to b4-pkc-41wq6.eu-west-2.aws.confluent.cloud:9092 [('52.56.207.193', 9092) IPv4]
[2025-03-06T03:00:15.465+0000] {conn.py:480} INFO - <BrokerConnection client_id=kafka-python-2.0.5, node_id=4 host=b4-pkc-41wq6.eu-west-2.aws.confluent.cloud:9092 <handshake> [IPv4 ('52.56.207.193', 9092)]>: Loading system default SSL CAs from ('/usr/lib/ssl/cert.pem', '/usr/lib/ssl/certs', 'SSL_CERT_FILE', '/usr/lib/ssl/cert.pem', 'SSL_CERT_DIR', '/usr/lib/ssl/certs')
[2025-03-06T03:00:15.913+0000] {conn.py:665} INFO - <BrokerConnection client_id=kafka-python-2.0.5, node_id=4 host=b4-pkc-41wq6.eu-west-2.aws.confluent.cloud:9092 <authenticating> [IPv4 ('52.56.207.193', 9092)]>: Authenticated as XGISOSVJLGK43N6I via PLAIN
[2025-03-06T03:00:15.914+0000] {conn.py:449} INFO - <BrokerConnection client_id=kafka-python-2.0.5, node_id=4 host=b4-pkc-41wq6.eu-west-2.aws.confluent.cloud:9092 <authenticating> [IPv4 ('52.56.207.193', 9092)]>: Connection complete.
[2025-03-06T03:00:15.914+0000] {conn.py:928} INFO - <BrokerConnection client_id=kafka-python-2.0.5, node_id=bootstrap-0 host=pkc-41wq6.eu-west-2.aws.confluent.cloud:9092 <connected> [IPv4 ('18.134.120.81', 9092)]>: Closing connection. 
[2025-03-06T03:00:16.056+0000] {conn.py:384} INFO - <BrokerConnection client_id=kafka-python-2.0.5, node_id=1 host=b1-pkc-41wq6.eu-west-2.aws.confluent.cloud:9092 <connecting> [IPv4 ('18.169.23.80', 9092)]>: connecting to b1-pkc-41wq6.eu-west-2.aws.confluent.cloud:9092 [('18.169.23.80', 9092) IPv4]
[2025-03-06T03:00:16.161+0000] {conn.py:480} INFO - <BrokerConnection client_id=kafka-python-2.0.5, node_id=1 host=b1-pkc-41wq6.eu-west-2.aws.confluent.cloud:9092 <handshake> [IPv4 ('18.169.23.80', 9092)]>: Loading system default SSL CAs from ('/usr/lib/ssl/cert.pem', '/usr/lib/ssl/certs', 'SSL_CERT_FILE', '/usr/lib/ssl/cert.pem', 'SSL_CERT_DIR', '/usr/lib/ssl/certs')
[2025-03-06T03:00:16.610+0000] {conn.py:665} INFO - <BrokerConnection client_id=kafka-python-2.0.5, node_id=1 host=b1-pkc-41wq6.eu-west-2.aws.confluent.cloud:9092 <authenticating> [IPv4 ('18.169.23.80', 9092)]>: Authenticated as XGISOSVJLGK43N6I via PLAIN
[2025-03-06T03:00:16.611+0000] {conn.py:449} INFO - <BrokerConnection client_id=kafka-python-2.0.5, node_id=1 host=b1-pkc-41wq6.eu-west-2.aws.confluent.cloud:9092 <authenticating> [IPv4 ('18.169.23.80', 9092)]>: Connection complete.
[2025-03-06T03:00:16.743+0000] {conn.py:384} INFO - <BrokerConnection client_id=kafka-python-2.0.5, node_id=2 host=b2-pkc-41wq6.eu-west-2.aws.confluent.cloud:9092 <connecting> [IPv4 ('18.175.87.62', 9092)]>: connecting to b2-pkc-41wq6.eu-west-2.aws.confluent.cloud:9092 [('18.175.87.62', 9092) IPv4]
[2025-03-06T03:00:16.848+0000] {conn.py:480} INFO - <BrokerConnection client_id=kafka-python-2.0.5, node_id=2 host=b2-pkc-41wq6.eu-west-2.aws.confluent.cloud:9092 <handshake> [IPv4 ('18.175.87.62', 9092)]>: Loading system default SSL CAs from ('/usr/lib/ssl/cert.pem', '/usr/lib/ssl/certs', 'SSL_CERT_FILE', '/usr/lib/ssl/cert.pem', 'SSL_CERT_DIR', '/usr/lib/ssl/certs')
[2025-03-06T03:00:17.305+0000] {conn.py:665} INFO - <BrokerConnection client_id=kafka-python-2.0.5, node_id=2 host=b2-pkc-41wq6.eu-west-2.aws.confluent.cloud:9092 <authenticating> [IPv4 ('18.175.87.62', 9092)]>: Authenticated as XGISOSVJLGK43N6I via PLAIN
[2025-03-06T03:00:17.308+0000] {conn.py:449} INFO - <BrokerConnection client_id=kafka-python-2.0.5, node_id=2 host=b2-pkc-41wq6.eu-west-2.aws.confluent.cloud:9092 <authenticating> [IPv4 ('18.175.87.62', 9092)]>: Connection complete.
[2025-03-06T03:00:17.440+0000] {conn.py:384} INFO - <BrokerConnection client_id=kafka-python-2.0.5, node_id=5 host=b5-pkc-41wq6.eu-west-2.aws.confluent.cloud:9092 <connecting> [IPv4 ('3.11.137.161', 9092)]>: connecting to b5-pkc-41wq6.eu-west-2.aws.confluent.cloud:9092 [('3.11.137.161', 9092) IPv4]
[2025-03-06T03:00:17.545+0000] {conn.py:480} INFO - <BrokerConnection client_id=kafka-python-2.0.5, node_id=5 host=b5-pkc-41wq6.eu-west-2.aws.confluent.cloud:9092 <handshake> [IPv4 ('3.11.137.161', 9092)]>: Loading system default SSL CAs from ('/usr/lib/ssl/cert.pem', '/usr/lib/ssl/certs', 'SSL_CERT_FILE', '/usr/lib/ssl/cert.pem', 'SSL_CERT_DIR', '/usr/lib/ssl/certs')
[2025-03-06T03:00:17.892+0000] {conn.py:665} INFO - <BrokerConnection client_id=kafka-python-2.0.5, node_id=5 host=b5-pkc-41wq6.eu-west-2.aws.confluent.cloud:9092 <authenticating> [IPv4 ('3.11.137.161', 9092)]>: Authenticated as XGISOSVJLGK43N6I via PLAIN
[2025-03-06T03:00:17.894+0000] {conn.py:449} INFO - <BrokerConnection client_id=kafka-python-2.0.5, node_id=5 host=b5-pkc-41wq6.eu-west-2.aws.confluent.cloud:9092 <authenticating> [IPv4 ('3.11.137.161', 9092)]>: Connection complete.
[2025-03-06T03:00:18.034+0000] {conn.py:384} INFO - <BrokerConnection client_id=kafka-python-2.0.5, node_id=3 host=b3-pkc-41wq6.eu-west-2.aws.confluent.cloud:9092 <connecting> [IPv4 ('18.169.87.70', 9092)]>: connecting to b3-pkc-41wq6.eu-west-2.aws.confluent.cloud:9092 [('18.169.87.70', 9092) IPv4]
[2025-03-06T03:00:18.146+0000] {conn.py:480} INFO - <BrokerConnection client_id=kafka-python-2.0.5, node_id=3 host=b3-pkc-41wq6.eu-west-2.aws.confluent.cloud:9092 <handshake> [IPv4 ('18.169.87.70', 9092)]>: Loading system default SSL CAs from ('/usr/lib/ssl/cert.pem', '/usr/lib/ssl/certs', 'SSL_CERT_FILE', '/usr/lib/ssl/cert.pem', 'SSL_CERT_DIR', '/usr/lib/ssl/certs')
[2025-03-06T03:00:18.626+0000] {conn.py:665} INFO - <BrokerConnection client_id=kafka-python-2.0.5, node_id=3 host=b3-pkc-41wq6.eu-west-2.aws.confluent.cloud:9092 <authenticating> [IPv4 ('18.169.87.70', 9092)]>: Authenticated as XGISOSVJLGK43N6I via PLAIN
[2025-03-06T03:00:18.627+0000] {conn.py:449} INFO - <BrokerConnection client_id=kafka-python-2.0.5, node_id=3 host=b3-pkc-41wq6.eu-west-2.aws.confluent.cloud:9092 <authenticating> [IPv4 ('18.169.87.70', 9092)]>: Connection complete.
[2025-03-06T03:00:18.754+0000] {conn.py:384} INFO - <BrokerConnection client_id=kafka-python-2.0.5, node_id=0 host=b0-pkc-41wq6.eu-west-2.aws.confluent.cloud:9092 <connecting> [IPv4 ('13.43.16.9', 9092)]>: connecting to b0-pkc-41wq6.eu-west-2.aws.confluent.cloud:9092 [('13.43.16.9', 9092) IPv4]
[2025-03-06T03:00:18.859+0000] {conn.py:480} INFO - <BrokerConnection client_id=kafka-python-2.0.5, node_id=0 host=b0-pkc-41wq6.eu-west-2.aws.confluent.cloud:9092 <handshake> [IPv4 ('13.43.16.9', 9092)]>: Loading system default SSL CAs from ('/usr/lib/ssl/cert.pem', '/usr/lib/ssl/certs', 'SSL_CERT_FILE', '/usr/lib/ssl/cert.pem', 'SSL_CERT_DIR', '/usr/lib/ssl/certs')
[2025-03-06T03:00:19.310+0000] {conn.py:665} INFO - <BrokerConnection client_id=kafka-python-2.0.5, node_id=0 host=b0-pkc-41wq6.eu-west-2.aws.confluent.cloud:9092 <authenticating> [IPv4 ('13.43.16.9', 9092)]>: Authenticated as XGISOSVJLGK43N6I via PLAIN
[2025-03-06T03:00:19.313+0000] {conn.py:449} INFO - <BrokerConnection client_id=kafka-python-2.0.5, node_id=0 host=b0-pkc-41wq6.eu-west-2.aws.confluent.cloud:9092 <authenticating> [IPv4 ('13.43.16.9', 9092)]>: Connection complete.
[2025-03-06T03:01:20.263+0000] {conn.py:928} INFO - <BrokerConnection client_id=kafka-python-2.0.5, node_id=4 host=b4-pkc-41wq6.eu-west-2.aws.confluent.cloud:9092 <connected> [IPv4 ('52.56.207.193', 9092)]>: Closing connection. 
[2025-03-06T03:01:20.268+0000] {fetcher.py:782} INFO - Fetch to node 4 failed: Cancelled: <BrokerConnection client_id=kafka-python-2.0.5, node_id=4 host=b4-pkc-41wq6.eu-west-2.aws.confluent.cloud:9092 <connected> [IPv4 ('52.56.207.193', 9092)]>
[2025-03-06T03:01:20.269+0000] {conn.py:928} INFO - <BrokerConnection client_id=kafka-python-2.0.5, node_id=1 host=b1-pkc-41wq6.eu-west-2.aws.confluent.cloud:9092 <connected> [IPv4 ('18.169.23.80', 9092)]>: Closing connection. 
[2025-03-06T03:01:20.270+0000] {fetcher.py:782} INFO - Fetch to node 1 failed: Cancelled: <BrokerConnection client_id=kafka-python-2.0.5, node_id=1 host=b1-pkc-41wq6.eu-west-2.aws.confluent.cloud:9092 <connected> [IPv4 ('18.169.23.80', 9092)]>
[2025-03-06T03:01:20.270+0000] {conn.py:928} INFO - <BrokerConnection client_id=kafka-python-2.0.5, node_id=2 host=b2-pkc-41wq6.eu-west-2.aws.confluent.cloud:9092 <connected> [IPv4 ('18.175.87.62', 9092)]>: Closing connection. 
[2025-03-06T03:01:20.271+0000] {fetcher.py:782} INFO - Fetch to node 2 failed: Cancelled: <BrokerConnection client_id=kafka-python-2.0.5, node_id=2 host=b2-pkc-41wq6.eu-west-2.aws.confluent.cloud:9092 <connected> [IPv4 ('18.175.87.62', 9092)]>
[2025-03-06T03:01:20.271+0000] {conn.py:928} INFO - <BrokerConnection client_id=kafka-python-2.0.5, node_id=5 host=b5-pkc-41wq6.eu-west-2.aws.confluent.cloud:9092 <connected> [IPv4 ('3.11.137.161', 9092)]>: Closing connection. 
[2025-03-06T03:01:20.273+0000] {fetcher.py:782} INFO - Fetch to node 5 failed: Cancelled: <BrokerConnection client_id=kafka-python-2.0.5, node_id=5 host=b5-pkc-41wq6.eu-west-2.aws.confluent.cloud:9092 <connected> [IPv4 ('3.11.137.161', 9092)]>
[2025-03-06T03:01:20.273+0000] {conn.py:928} INFO - <BrokerConnection client_id=kafka-python-2.0.5, node_id=3 host=b3-pkc-41wq6.eu-west-2.aws.confluent.cloud:9092 <connected> [IPv4 ('18.169.87.70', 9092)]>: Closing connection. 
[2025-03-06T03:01:20.274+0000] {fetcher.py:782} INFO - Fetch to node 3 failed: Cancelled: <BrokerConnection client_id=kafka-python-2.0.5, node_id=3 host=b3-pkc-41wq6.eu-west-2.aws.confluent.cloud:9092 <connected> [IPv4 ('18.169.87.70', 9092)]>
[2025-03-06T03:01:20.274+0000] {conn.py:928} INFO - <BrokerConnection client_id=kafka-python-2.0.5, node_id=0 host=b0-pkc-41wq6.eu-west-2.aws.confluent.cloud:9092 <connected> [IPv4 ('13.43.16.9', 9092)]>: Closing connection. 
[2025-03-06T03:01:20.275+0000] {fetcher.py:782} INFO - Fetch to node 0 failed: Cancelled: <BrokerConnection client_id=kafka-python-2.0.5, node_id=0 host=b0-pkc-41wq6.eu-west-2.aws.confluent.cloud:9092 <connected> [IPv4 ('13.43.16.9', 9092)]>
[2025-03-06T03:01:26.397+0000] {fraud_detection_training.py:129} ERROR - Failed to read data from Kafka: time data "2025-03-05T22:14:39+00:00" doesn't match format "%Y-%m-%dT%H:%M:%S.%f%z", at position 249319. You might want to try:
    - passing `format` if your strings have a consistent format;
    - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
    - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
Traceback (most recent call last):
  File "/opt/airflow/dags/fraud_detection_training.py", line 118, in read_from_kafka
    df['timestamp'] = pd.to_datetime(df['timestamp'], utc=True)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/pandas/core/tools/datetimes.py", line 1112, in to_datetime
    values = convert_listlike(arg._values, format)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/pandas/core/tools/datetimes.py", line 488, in _convert_listlike_datetimes
    return _array_strptime_with_fallback(arg, name, utc, format, exact, errors)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/pandas/core/tools/datetimes.py", line 519, in _array_strptime_with_fallback
    result, timezones = array_strptime(arg, fmt, exact=exact, errors=errors, utc=utc)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "strptime.pyx", line 534, in pandas._libs.tslibs.strptime.array_strptime
  File "strptime.pyx", line 355, in pandas._libs.tslibs.strptime.array_strptime
ValueError: time data "2025-03-05T22:14:39+00:00" doesn't match format "%Y-%m-%dT%H:%M:%S.%f%z", at position 249319. You might want to try:
    - passing `format` if your strings have a consistent format;
    - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
    - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2025-03-06T03:01:26.411+0000] {fraud_detection_training.py:327} ERROR - Training failed: time data "2025-03-05T22:14:39+00:00" doesn't match format "%Y-%m-%dT%H:%M:%S.%f%z", at position 249319. You might want to try:
    - passing `format` if your strings have a consistent format;
    - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
    - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
Traceback (most recent call last):
  File "/opt/airflow/dags/fraud_detection_training.py", line 174, in train_model
    df = self.read_from_kafka()
         ^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/airflow/dags/fraud_detection_training.py", line 118, in read_from_kafka
    df['timestamp'] = pd.to_datetime(df['timestamp'], utc=True)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/pandas/core/tools/datetimes.py", line 1112, in to_datetime
    values = convert_listlike(arg._values, format)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/pandas/core/tools/datetimes.py", line 488, in _convert_listlike_datetimes
    return _array_strptime_with_fallback(arg, name, utc, format, exact, errors)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/pandas/core/tools/datetimes.py", line 519, in _array_strptime_with_fallback
    result, timezones = array_strptime(arg, fmt, exact=exact, errors=errors, utc=utc)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "strptime.pyx", line 534, in pandas._libs.tslibs.strptime.array_strptime
  File "strptime.pyx", line 355, in pandas._libs.tslibs.strptime.array_strptime
ValueError: time data "2025-03-05T22:14:39+00:00" doesn't match format "%Y-%m-%dT%H:%M:%S.%f%z", at position 249319. You might want to try:
    - passing `format` if your strings have a consistent format;
    - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
    - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2025-03-06T03:01:26.413+0000] {fraud_detection_training_dag.py:29} ERROR - Training failed: time data "2025-03-05T22:14:39+00:00" doesn't match format "%Y-%m-%dT%H:%M:%S.%f%z", at position 249319. You might want to try:
    - passing `format` if your strings have a consistent format;
    - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
    - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
Traceback (most recent call last):
  File "/opt/airflow/dags/fraud_detection_training_dag.py", line 25, in _train_model
    model, precision = trainer.train_model()
                       ^^^^^^^^^^^^^^^^^^^^^
  File "/opt/airflow/dags/fraud_detection_training.py", line 174, in train_model
    df = self.read_from_kafka()
         ^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/airflow/dags/fraud_detection_training.py", line 118, in read_from_kafka
    df['timestamp'] = pd.to_datetime(df['timestamp'], utc=True)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/pandas/core/tools/datetimes.py", line 1112, in to_datetime
    values = convert_listlike(arg._values, format)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/pandas/core/tools/datetimes.py", line 488, in _convert_listlike_datetimes
    return _array_strptime_with_fallback(arg, name, utc, format, exact, errors)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/pandas/core/tools/datetimes.py", line 519, in _array_strptime_with_fallback
    result, timezones = array_strptime(arg, fmt, exact=exact, errors=errors, utc=utc)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "strptime.pyx", line 534, in pandas._libs.tslibs.strptime.array_strptime
  File "strptime.pyx", line 355, in pandas._libs.tslibs.strptime.array_strptime
ValueError: time data "2025-03-05T22:14:39+00:00" doesn't match format "%Y-%m-%dT%H:%M:%S.%f%z", at position 249319. You might want to try:
    - passing `format` if your strings have a consistent format;
    - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
    - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2025-03-06T03:01:26.488+0000] {taskinstance.py:3313} ERROR - Task failed with exception
Traceback (most recent call last):
  File "/opt/airflow/dags/fraud_detection_training_dag.py", line 25, in _train_model
    model, precision = trainer.train_model()
                       ^^^^^^^^^^^^^^^^^^^^^
  File "/opt/airflow/dags/fraud_detection_training.py", line 174, in train_model
    df = self.read_from_kafka()
         ^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/airflow/dags/fraud_detection_training.py", line 118, in read_from_kafka
    df['timestamp'] = pd.to_datetime(df['timestamp'], utc=True)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/pandas/core/tools/datetimes.py", line 1112, in to_datetime
    values = convert_listlike(arg._values, format)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/pandas/core/tools/datetimes.py", line 488, in _convert_listlike_datetimes
    return _array_strptime_with_fallback(arg, name, utc, format, exact, errors)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/pandas/core/tools/datetimes.py", line 519, in _array_strptime_with_fallback
    result, timezones = array_strptime(arg, fmt, exact=exact, errors=errors, utc=utc)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "strptime.pyx", line 534, in pandas._libs.tslibs.strptime.array_strptime
  File "strptime.pyx", line 355, in pandas._libs.tslibs.strptime.array_strptime
ValueError: time data "2025-03-05T22:14:39+00:00" doesn't match format "%Y-%m-%dT%H:%M:%S.%f%z", at position 249319. You might want to try:
    - passing `format` if your strings have a consistent format;
    - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
    - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/taskinstance.py", line 768, in _execute_task
    result = _execute_callable(context=context, **execute_callable_kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/taskinstance.py", line 734, in _execute_callable
    return ExecutionCallableRunner(
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/utils/operator_helpers.py", line 252, in run
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/baseoperator.py", line 424, in wrapper
    return func(self, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/operators/python.py", line 238, in execute
    return_value = self.execute_callable()
                   ^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/operators/python.py", line 256, in execute_callable
    return runner.run(*self.op_args, **self.op_kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/utils/operator_helpers.py", line 252, in run
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/airflow/dags/fraud_detection_training_dag.py", line 30, in _train_model
    raise AirflowException(f'Model training failed: {str(e)}')
airflow.exceptions.AirflowException: Model training failed: time data "2025-03-05T22:14:39+00:00" doesn't match format "%Y-%m-%dT%H:%M:%S.%f%z", at position 249319. You might want to try:
    - passing `format` if your strings have a consistent format;
    - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
    - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2025-03-06T03:01:26.498+0000] {taskinstance.py:1226} INFO - Marking task as FAILED. dag_id=fraud_detection_training, task_id=execute_training, run_id=scheduled__2025-03-05T03:00:00+00:00, execution_date=20250305T030000, start_date=20250306T030005, end_date=20250306T030126
[2025-03-06T03:01:26.645+0000] {taskinstance.py:341} INFO - ::group::Post task execution logs
[2025-03-06T03:01:26.646+0000] {standard_task_runner.py:124} ERROR - Failed to execute job 37 for task execute_training (Model training failed: time data "2025-03-05T22:14:39+00:00" doesn't match format "%Y-%m-%dT%H:%M:%S.%f%z", at position 249319. You might want to try:
    - passing `format` if your strings have a consistent format;
    - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
    - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.; 33264)
Traceback (most recent call last):
  File "/opt/airflow/dags/fraud_detection_training_dag.py", line 25, in _train_model
    model, precision = trainer.train_model()
                       ^^^^^^^^^^^^^^^^^^^^^
  File "/opt/airflow/dags/fraud_detection_training.py", line 174, in train_model
    df = self.read_from_kafka()
         ^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/airflow/dags/fraud_detection_training.py", line 118, in read_from_kafka
    df['timestamp'] = pd.to_datetime(df['timestamp'], utc=True)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/pandas/core/tools/datetimes.py", line 1112, in to_datetime
    values = convert_listlike(arg._values, format)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/pandas/core/tools/datetimes.py", line 488, in _convert_listlike_datetimes
    return _array_strptime_with_fallback(arg, name, utc, format, exact, errors)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/pandas/core/tools/datetimes.py", line 519, in _array_strptime_with_fallback
    result, timezones = array_strptime(arg, fmt, exact=exact, errors=errors, utc=utc)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "strptime.pyx", line 534, in pandas._libs.tslibs.strptime.array_strptime
  File "strptime.pyx", line 355, in pandas._libs.tslibs.strptime.array_strptime
ValueError: time data "2025-03-05T22:14:39+00:00" doesn't match format "%Y-%m-%dT%H:%M:%S.%f%z", at position 249319. You might want to try:
    - passing `format` if your strings have a consistent format;
    - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
    - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/task/task_runner/standard_task_runner.py", line 117, in _start_by_fork
    ret = args.func(args, dag=self.dag)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/cli/cli_config.py", line 49, in command
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/utils/cli.py", line 116, in wrapper
    return f(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/cli/commands/task_command.py", line 483, in task_run
    task_return_code = _run_task_by_selected_method(args, _dag, ti)
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/cli/commands/task_command.py", line 256, in _run_task_by_selected_method
    return _run_raw_task(args, ti)
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/cli/commands/task_command.py", line 341, in _run_raw_task
    return ti._run_raw_task(
           ^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/utils/session.py", line 97, in wrapper
    return func(*args, session=session, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/taskinstance.py", line 3006, in _run_raw_task
    return _run_raw_task(
           ^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/taskinstance.py", line 274, in _run_raw_task
    TaskInstance._execute_task_with_callbacks(
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/taskinstance.py", line 3161, in _execute_task_with_callbacks
    result = self._execute_task(context, task_orig)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/taskinstance.py", line 3185, in _execute_task
    return _execute_task(self, context, task_orig)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/taskinstance.py", line 768, in _execute_task
    result = _execute_callable(context=context, **execute_callable_kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/taskinstance.py", line 734, in _execute_callable
    return ExecutionCallableRunner(
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/utils/operator_helpers.py", line 252, in run
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/models/baseoperator.py", line 424, in wrapper
    return func(self, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/operators/python.py", line 238, in execute
    return_value = self.execute_callable()
                   ^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/operators/python.py", line 256, in execute_callable
    return runner.run(*self.op_args, **self.op_kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/airflow/.local/lib/python3.12/site-packages/airflow/utils/operator_helpers.py", line 252, in run
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/airflow/dags/fraud_detection_training_dag.py", line 30, in _train_model
    raise AirflowException(f'Model training failed: {str(e)}')
airflow.exceptions.AirflowException: Model training failed: time data "2025-03-05T22:14:39+00:00" doesn't match format "%Y-%m-%dT%H:%M:%S.%f%z", at position 249319. You might want to try:
    - passing `format` if your strings have a consistent format;
    - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
    - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2025-03-06T03:01:26.745+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 1
[2025-03-06T03:01:26.859+0000] {taskinstance.py:3901} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2025-03-06T03:01:26.862+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
